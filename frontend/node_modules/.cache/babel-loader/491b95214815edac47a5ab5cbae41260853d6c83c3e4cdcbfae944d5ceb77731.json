{"ast":null,"code":"// Python examples\nexport const pythonExamples = [{\n  name: 'Simple Bar Chart (Matplotlib)',\n  code: `\n# Example 1: Simple Bar Chart (Matplotlib)\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\ncategories = ['A', 'B', 'C', 'D', 'E']\nvalues = [22, 35, 14, 28, 19]\n\n# Create the figure and axis\nfig, ax = plt.subplots(figsize=(8, 6))\n\n# Create the bar chart\nax.bar(categories, values, color='skyblue')\n\n# Add labels and title\nax.set_xlabel('Categories')\nax.set_ylabel('Values')\nax.set_title('Simple Bar Chart')\n\n# Add some text for labels, title and custom x-axis tick labels, etc.\nax.set_xticks(range(len(categories)))\nax.set_xticklabels(categories)\n\n# Add value labels on top of each bar\nfor i, v in enumerate(values):\n    ax.text(i, v + 0.5, str(v), ha='center')\n\n# Adjust layout\nplt.tight_layout()\n\n  `\n}, {\n  name: 'Interactive Scatter Plot (Plotly)',\n  code: `\n# Example 2: Interactive Scatter Plot (Plotly)\nimport plotly.express as px\nimport numpy as np\n\n# Generate random data\nnp.random.seed(42)\nn = 100\nx = np.random.normal(0, 1, n)\ny = x + np.random.normal(0, 1, n)\nsizes = np.random.uniform(5, 15, n)\ncolors = np.random.uniform(0, 1, n)\n\ndf = pd.DataFrame({\n    'x_val': x,\n    'y_val': y,\n    'size': sizes,\n    'color': colors\n})\n\n# Create a scatter plot with Plotly Express\nfig = px.scatter(\n    df,\n    x='x_val', \n    y='y_val',\n    size='size',\n    color='color',\n    color_continuous_scale='viridis',\n    opacity=0.8,\n    title='Interactive Scatter Plot',\n    labels={'x': 'X Value', 'y': 'Y Value', 'color': 'Color Value'},\n    hover_data={'x_val', 'y_val'}\n)\n\n# Update layout\nfig.update_layout(\n    width=800,\n    height=600,\n    title_font_size=20,\n    title_x=0.5,\n    coloraxis_colorbar=dict(title='Color Scale')\n)\n\n# Update traces\nfig.update_traces(\n    marker=dict(line=dict(width=1, color='DarkSlateGrey')),\n    selector=dict(mode='markers')\n)  \n  `\n}, {\n  name: '3D Surface Plot (Plotly)',\n  code: `\n# Example 3: 3D Surface Plot (Plotly)\nimport plotly.graph_objects as go\nimport numpy as np\n\n# Create data\nx = np.linspace(-5, 5, 50)\ny = np.linspace(-5, 5, 50)\nx_grid, y_grid = np.meshgrid(x, y)\n\n# Create 3D surface\nz_grid = np.sin(np.sqrt(x_grid**2 + y_grid**2))\n\n# Create figure\nfig = go.Figure(data=[go.Surface(x=x_grid, y=y_grid, z=z_grid)])\n\n# Update layout\nfig.update_layout(\n    title='3D Surface Plot',\n    autosize=False,\n    width=800,\n    height=600,\n    scene=dict(\n        xaxis_title='X Axis',\n        yaxis_title='Y Axis',\n        zaxis_title='Z Axis',\n        aspectratio=dict(x=1, y=1, z=0.7),\n        camera=dict(\n            eye=dict(x=1.2, y=1.2, z=1.2)\n        )\n    )\n)  \n  `\n}, {\n  name: 'Line Chart with Multiple Series (Matplotlib)',\n  code: `\n# Example 4: Line Chart with Multiple Series (Matplotlib)\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Generate data\nx = np.linspace(0, 10, 100)\ny1 = np.sin(x)\ny2 = np.cos(x)\ny3 = np.sin(x) * np.cos(x)\n\n# Create figure and axis\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Plot data\nax.plot(x, y1, label='sin(x)', color='blue', linewidth=2)\nax.plot(x, y2, label='cos(x)', color='red', linewidth=2)\nax.plot(x, y3, label='sin(x)cos(x)', color='green', linewidth=2, linestyle='--')\n\n# Add labels and title\nax.set_xlabel('X')\nax.set_ylabel('Y')\nax.set_title('Multiple Line Series')\n\n# Add grid\nax.grid(True, linestyle='--', alpha=0.7)\n\n# Add legend\nax.legend()\n\n# Adjust layout\nplt.tight_layout()  \n  `\n}];\n\n// R examples\nexport const rExamples = [{\n  name: 'Basic Bar Chart (ggplot2)',\n  code: `\n# Example 1: Basic Bar Chart (ggplot2)\n# Create a data frame\ndata <- data.frame(\n  category = c(\"A\", \"B\", \"C\", \"D\", \"E\"),\n  value = c(22, 35, 14, 28, 19)\n)\n\n# Create a ggplot bar chart\np <- ggplot(data, aes(x = category, y = value, fill = category)) +\n  geom_bar(stat = \"identity\", width = 0.7) +\n  geom_text(aes(label = value), vjust = -0.5, size = 4) +\n  scale_fill_brewer(palette = \"Pastel1\") +\n  labs(\n    title = \"Simple Bar Chart\",\n    x = \"Categories\",\n    y = \"Values\"\n  ) +\n  theme_minimal() +\n  theme(\n    plot.title = element_text(hjust = 0.5, size = 16),\n    axis.title = element_text(size = 12),\n    legend.position = \"none\"\n  )\n\n# Print the plot\nprint(p)  \n      `\n}, {\n  name: 'Interactive Scatter Plot (plotly)',\n  code: `\n# Example 2: Interactive Scatter Plot (plotly)\n# Load required libraries\nlibrary(plotly)\n\n# Create sample data\nset.seed(42)\nn <- 100\nx <- rnorm(n)\ny <- x + rnorm(n)\nsize <- runif(n, 5, 15)\ncolor <- runif(n)\n\n# Create a data frame\ndata <- data.frame(x = x, y = y, size = size, color = color)\n\n# Create a plotly scatter plot\np <- plot_ly(data,\n          x = ~x,\n          y = ~y,\n          size = ~size,\n          color = ~color,\n          type = \"scatter\",\n          mode = \"markers\",\n          marker = list(\n            opacity = 0.8,\n            line = list(width = 1, color = \"darkslategrey\")\n          ),\n          hoverinfo = \"text\",\n          text = ~paste(\"X:\", round(x, 2), \"<br>Y:\", round(y, 2))\n        ) %>%\n        layout(\n          title = \"Interactive Scatter Plot\",\n          xaxis = list(title = \"X Value\"),\n          yaxis = list(title = \"Y Value\"),\n          coloraxis = list(colorbar = list(title = \"Color Scale\"))\n        )\n\n# Print the plot\np      \n  `\n}, {\n  name: '3D Plot (rgl)',\n  code: `\n# Example 3: 3D Plot (rgl)\n# Load libraries\nlibrary(rgl)\n\n# Generate data for a 3D surface\nx <- seq(-5, 5, length = 50)\ny <- seq(-5, 5, length = 50)\nz <- outer(x, y, function(x, y) sin(sqrt(x^2 + y^2)))\n\n# Create colors based on z values\ncol <- heat.colors(length(z))\n\n# Create a 3D surface\npersp3d(x, y, z, col = col,\n       xlab = \"X Axis\", ylab = \"Y Axis\", zlab = \"Z Axis\",\n       main = \"3D Surface Plot\")\n\n# Add some points\npoints3d(x = runif(50, -5, 5),\n         y = runif(50, -5, 5),\n         z = runif(50, -1, 1),\n         col = \"blue\", size = 4)\n\n# Save as PNG (since we can't display 3D interactively in this interface)\nrgl.snapshot('3d_plot.png')      \n  `\n}, {\n  name: 'Boxplot (ggplot2)',\n  code: `\n# Example 4: Boxplot (ggplot2)\n# Create sample data\nset.seed(123)\ndata <- data.frame(\n  group = rep(c(\"A\", \"B\", \"C\", \"D\"), each = 30),\n  value = c(\n    rnorm(30, mean = 5, sd = 1),\n    rnorm(30, mean = 7, sd = 1.5),\n    rnorm(30, mean = 4, sd = 0.8),\n    rnorm(30, mean = 6, sd = 1.2)\n  )\n)\n\n# Create a boxplot with ggplot2\np <- ggplot(data, aes(x = group, y = value, fill = group)) +\n  geom_boxplot(alpha = 0.7) +\n  geom_jitter(width = 0.2, alpha = 0.5) +\n  scale_fill_brewer(palette = \"Set2\") +\n  labs(\n    title = \"Boxplot Comparison\",\n    x = \"Group\",\n    y = \"Value\"\n  ) +\n  theme_minimal() +\n  theme(\n    plot.title = element_text(hjust = 0.5, size = 16),\n    axis.title = element_text(size = 12),\n    legend.position = \"none\"\n  )\n\n# Print the plot\nprint(p)      \n  `\n}];","map":{"version":3,"names":["pythonExamples","name","code","rExamples"],"sources":["/Users/User/Documents/Language agnostic visualization/frontend/src/examples.js"],"sourcesContent":["// Python examples\nexport const pythonExamples = [\n    {\n      name: 'Simple Bar Chart (Matplotlib)',\n      code: `\n# Example 1: Simple Bar Chart (Matplotlib)\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\ncategories = ['A', 'B', 'C', 'D', 'E']\nvalues = [22, 35, 14, 28, 19]\n\n# Create the figure and axis\nfig, ax = plt.subplots(figsize=(8, 6))\n\n# Create the bar chart\nax.bar(categories, values, color='skyblue')\n\n# Add labels and title\nax.set_xlabel('Categories')\nax.set_ylabel('Values')\nax.set_title('Simple Bar Chart')\n\n# Add some text for labels, title and custom x-axis tick labels, etc.\nax.set_xticks(range(len(categories)))\nax.set_xticklabels(categories)\n\n# Add value labels on top of each bar\nfor i, v in enumerate(values):\n    ax.text(i, v + 0.5, str(v), ha='center')\n\n# Adjust layout\nplt.tight_layout()\n\n  `\n    },\n    {\n      name: 'Interactive Scatter Plot (Plotly)',\n      code: `\n# Example 2: Interactive Scatter Plot (Plotly)\nimport plotly.express as px\nimport numpy as np\n\n# Generate random data\nnp.random.seed(42)\nn = 100\nx = np.random.normal(0, 1, n)\ny = x + np.random.normal(0, 1, n)\nsizes = np.random.uniform(5, 15, n)\ncolors = np.random.uniform(0, 1, n)\n\ndf = pd.DataFrame({\n    'x_val': x,\n    'y_val': y,\n    'size': sizes,\n    'color': colors\n})\n\n# Create a scatter plot with Plotly Express\nfig = px.scatter(\n    df,\n    x='x_val', \n    y='y_val',\n    size='size',\n    color='color',\n    color_continuous_scale='viridis',\n    opacity=0.8,\n    title='Interactive Scatter Plot',\n    labels={'x': 'X Value', 'y': 'Y Value', 'color': 'Color Value'},\n    hover_data={'x_val', 'y_val'}\n)\n\n# Update layout\nfig.update_layout(\n    width=800,\n    height=600,\n    title_font_size=20,\n    title_x=0.5,\n    coloraxis_colorbar=dict(title='Color Scale')\n)\n\n# Update traces\nfig.update_traces(\n    marker=dict(line=dict(width=1, color='DarkSlateGrey')),\n    selector=dict(mode='markers')\n)  \n  `\n    },\n    {\n      name: '3D Surface Plot (Plotly)',\n      code: `\n# Example 3: 3D Surface Plot (Plotly)\nimport plotly.graph_objects as go\nimport numpy as np\n\n# Create data\nx = np.linspace(-5, 5, 50)\ny = np.linspace(-5, 5, 50)\nx_grid, y_grid = np.meshgrid(x, y)\n\n# Create 3D surface\nz_grid = np.sin(np.sqrt(x_grid**2 + y_grid**2))\n\n# Create figure\nfig = go.Figure(data=[go.Surface(x=x_grid, y=y_grid, z=z_grid)])\n\n# Update layout\nfig.update_layout(\n    title='3D Surface Plot',\n    autosize=False,\n    width=800,\n    height=600,\n    scene=dict(\n        xaxis_title='X Axis',\n        yaxis_title='Y Axis',\n        zaxis_title='Z Axis',\n        aspectratio=dict(x=1, y=1, z=0.7),\n        camera=dict(\n            eye=dict(x=1.2, y=1.2, z=1.2)\n        )\n    )\n)  \n  `\n    },\n    {\n      name: 'Line Chart with Multiple Series (Matplotlib)',\n      code: `\n# Example 4: Line Chart with Multiple Series (Matplotlib)\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Generate data\nx = np.linspace(0, 10, 100)\ny1 = np.sin(x)\ny2 = np.cos(x)\ny3 = np.sin(x) * np.cos(x)\n\n# Create figure and axis\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Plot data\nax.plot(x, y1, label='sin(x)', color='blue', linewidth=2)\nax.plot(x, y2, label='cos(x)', color='red', linewidth=2)\nax.plot(x, y3, label='sin(x)cos(x)', color='green', linewidth=2, linestyle='--')\n\n# Add labels and title\nax.set_xlabel('X')\nax.set_ylabel('Y')\nax.set_title('Multiple Line Series')\n\n# Add grid\nax.grid(True, linestyle='--', alpha=0.7)\n\n# Add legend\nax.legend()\n\n# Adjust layout\nplt.tight_layout()  \n  `\n    }\n  ];\n  \n  // R examples\n  export const rExamples = [\n    {\n      name: 'Basic Bar Chart (ggplot2)',\n      code: `\n# Example 1: Basic Bar Chart (ggplot2)\n# Create a data frame\ndata <- data.frame(\n  category = c(\"A\", \"B\", \"C\", \"D\", \"E\"),\n  value = c(22, 35, 14, 28, 19)\n)\n\n# Create a ggplot bar chart\np <- ggplot(data, aes(x = category, y = value, fill = category)) +\n  geom_bar(stat = \"identity\", width = 0.7) +\n  geom_text(aes(label = value), vjust = -0.5, size = 4) +\n  scale_fill_brewer(palette = \"Pastel1\") +\n  labs(\n    title = \"Simple Bar Chart\",\n    x = \"Categories\",\n    y = \"Values\"\n  ) +\n  theme_minimal() +\n  theme(\n    plot.title = element_text(hjust = 0.5, size = 16),\n    axis.title = element_text(size = 12),\n    legend.position = \"none\"\n  )\n\n# Print the plot\nprint(p)  \n      `\n    },\n    {\n      name: 'Interactive Scatter Plot (plotly)',\n      code: `\n# Example 2: Interactive Scatter Plot (plotly)\n# Load required libraries\nlibrary(plotly)\n\n# Create sample data\nset.seed(42)\nn <- 100\nx <- rnorm(n)\ny <- x + rnorm(n)\nsize <- runif(n, 5, 15)\ncolor <- runif(n)\n\n# Create a data frame\ndata <- data.frame(x = x, y = y, size = size, color = color)\n\n# Create a plotly scatter plot\np <- plot_ly(data,\n          x = ~x,\n          y = ~y,\n          size = ~size,\n          color = ~color,\n          type = \"scatter\",\n          mode = \"markers\",\n          marker = list(\n            opacity = 0.8,\n            line = list(width = 1, color = \"darkslategrey\")\n          ),\n          hoverinfo = \"text\",\n          text = ~paste(\"X:\", round(x, 2), \"<br>Y:\", round(y, 2))\n        ) %>%\n        layout(\n          title = \"Interactive Scatter Plot\",\n          xaxis = list(title = \"X Value\"),\n          yaxis = list(title = \"Y Value\"),\n          coloraxis = list(colorbar = list(title = \"Color Scale\"))\n        )\n\n# Print the plot\np      \n  `\n    },\n    {\n      name: '3D Plot (rgl)',\n      code: `\n# Example 3: 3D Plot (rgl)\n# Load libraries\nlibrary(rgl)\n\n# Generate data for a 3D surface\nx <- seq(-5, 5, length = 50)\ny <- seq(-5, 5, length = 50)\nz <- outer(x, y, function(x, y) sin(sqrt(x^2 + y^2)))\n\n# Create colors based on z values\ncol <- heat.colors(length(z))\n\n# Create a 3D surface\npersp3d(x, y, z, col = col,\n       xlab = \"X Axis\", ylab = \"Y Axis\", zlab = \"Z Axis\",\n       main = \"3D Surface Plot\")\n\n# Add some points\npoints3d(x = runif(50, -5, 5),\n         y = runif(50, -5, 5),\n         z = runif(50, -1, 1),\n         col = \"blue\", size = 4)\n\n# Save as PNG (since we can't display 3D interactively in this interface)\nrgl.snapshot('3d_plot.png')      \n  `\n    },\n    {\n      name: 'Boxplot (ggplot2)',\n      code: `\n# Example 4: Boxplot (ggplot2)\n# Create sample data\nset.seed(123)\ndata <- data.frame(\n  group = rep(c(\"A\", \"B\", \"C\", \"D\"), each = 30),\n  value = c(\n    rnorm(30, mean = 5, sd = 1),\n    rnorm(30, mean = 7, sd = 1.5),\n    rnorm(30, mean = 4, sd = 0.8),\n    rnorm(30, mean = 6, sd = 1.2)\n  )\n)\n\n# Create a boxplot with ggplot2\np <- ggplot(data, aes(x = group, y = value, fill = group)) +\n  geom_boxplot(alpha = 0.7) +\n  geom_jitter(width = 0.2, alpha = 0.5) +\n  scale_fill_brewer(palette = \"Set2\") +\n  labs(\n    title = \"Boxplot Comparison\",\n    x = \"Group\",\n    y = \"Value\"\n  ) +\n  theme_minimal() +\n  theme(\n    plot.title = element_text(hjust = 0.5, size = 16),\n    axis.title = element_text(size = 12),\n    legend.position = \"none\"\n  )\n\n# Print the plot\nprint(p)      \n  `\n    }\n  ];"],"mappings":"AAAA;AACA,OAAO,MAAMA,cAAc,GAAG,CAC1B;EACEC,IAAI,EAAE,+BAA+B;EACrCC,IAAI,EAAE;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACI,CAAC,EACD;EACED,IAAI,EAAE,mCAAmC;EACzCC,IAAI,EAAE;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACI,CAAC,EACD;EACED,IAAI,EAAE,0BAA0B;EAChCC,IAAI,EAAE;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACI,CAAC,EACD;EACED,IAAI,EAAE,8CAA8C;EACpDC,IAAI,EAAE;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACI,CAAC,CACF;;AAED;AACA,OAAO,MAAMC,SAAS,GAAG,CACvB;EACEF,IAAI,EAAE,2BAA2B;EACjCC,IAAI,EAAE;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACI,CAAC,EACD;EACED,IAAI,EAAE,mCAAmC;EACzCC,IAAI,EAAE;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACI,CAAC,EACD;EACED,IAAI,EAAE,eAAe;EACrBC,IAAI,EAAE;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACI,CAAC,EACD;EACED,IAAI,EAAE,mBAAmB;EACzBC,IAAI,EAAE;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACI,CAAC,CACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}