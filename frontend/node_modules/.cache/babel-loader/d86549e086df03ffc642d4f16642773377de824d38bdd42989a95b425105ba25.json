{"ast":null,"code":"// Python examples\nexport const pythonExamples = [{\n  name: 'Simple Bar Chart (Matplotlib)',\n  code: `\n  import matplotlib.pyplot as plt\n  import numpy as np\n  \n  # Data for plotting\n  categories = ['A', 'B', 'C', 'D', 'E']\n  values = [22, 35, 14, 28, 19]\n  \n  # Create the figure and axis\n  fig, ax = plt.subplots(figsize=(8, 6))\n  \n  # Create the bar chart\n  ax.bar(categories, values, color='skyblue')\n  \n  # Add labels and title\n  ax.set_xlabel('Categories')\n  ax.set_ylabel('Values')\n  ax.set_title('Simple Bar Chart')\n  \n  # Add some text for labels, title and custom x-axis tick labels, etc.\n  ax.set_xticks(range(len(categories)))\n  ax.set_xticklabels(categories)\n  \n  # Add value labels on top of each bar\n  for i, v in enumerate(values):\n      ax.text(i, v + 0.5, str(v), ha='center')\n  \n  # Adjust layout\n  plt.tight_layout()\n  `\n}, {\n  name: 'Interactive Scatter Plot (Plotly)',\n  code: `\n  import plotly.express as px\n  import numpy as np\n  \n  # Generate random data\n  np.random.seed(42)\n  n = 100\n  x = np.random.normal(0, 1, n)\n  y = x + np.random.normal(0, 1, n)\n  sizes = np.random.uniform(5, 15, n)\n  colors = np.random.uniform(0, 1, n)\n  \n  # Create a scatter plot with Plotly Express\n  fig = px.scatter(\n      x=x, \n      y=y,\n      size=sizes,\n      color=colors,\n      color_continuous_scale='viridis',\n      opacity=0.8,\n      title='Interactive Scatter Plot',\n      labels={'x': 'X Value', 'y': 'Y Value', 'color': 'Color Value'},\n      hover_data={'x': True, 'y': True}\n  )\n  \n  # Update layout\n  fig.update_layout(\n      width=800,\n      height=600,\n      title_font_size=20,\n      title_x=0.5,\n      coloraxis_colorbar=dict(title='Color Scale')\n  )\n  \n  # Update traces\n  fig.update_traces(\n      marker=dict(line=dict(width=1, color='DarkSlateGrey')),\n      selector=dict(mode='markers')\n  )\n  `\n}, {\n  name: '3D Surface Plot (Plotly)',\n  code: `\n  import plotly.graph_objects as go\n  import numpy as np\n  \n  # Create data\n  x = np.linspace(-5, 5, 50)\n  y = np.linspace(-5, 5, 50)\n  x_grid, y_grid = np.meshgrid(x, y)\n  \n  # Create 3D surface\n  z_grid = np.sin(np.sqrt(x_grid**2 + y_grid**2))\n  \n  # Create figure\n  fig = go.Figure(data=[go.Surface(x=x_grid, y=y_grid, z=z_grid)])\n  \n  # Update layout\n  fig.update_layout(\n      title='3D Surface Plot',\n      autosize=False,\n      width=800,\n      height=600,\n      scene=dict(\n          xaxis_title='X Axis',\n          yaxis_title='Y Axis',\n          zaxis_title='Z Axis',\n          aspectratio=dict(x=1, y=1, z=0.7),\n          camera=dict(\n              eye=dict(x=1.2, y=1.2, z=1.2)\n          )\n      )\n  )\n  `\n}, {\n  name: 'Line Chart with Multiple Series (Matplotlib)',\n  code: `import matplotlib.pyplot as plt\n  import numpy as np\n  \n  # Generate data\n  x = np.linspace(0, 10, 100)\n  y1 = np.sin(x)\n  y2 = np.cos(x)\n  y3 = np.sin(x) * np.cos(x)\n  \n  # Create figure and axis\n  fig, ax = plt.subplots(figsize=(10, 6))\n  \n  # Plot data\n  ax.plot(x, y1, label='sin(x)', color='blue', linewidth=2)\n  ax.plot(x, y2, label='cos(x)', color='red', linewidth=2)\n  ax.plot(x, y3, label='sin(x)cos(x)', color='green', linewidth=2, linestyle='--')\n  \n  # Add labels and title\n  ax.set_xlabel('X')\n  ax.set_ylabel('Y')\n  ax.set_title('Multiple Line Series')\n  \n  # Add grid\n  ax.grid(True, linestyle='--', alpha=0.7)\n  \n  # Add legend\n  ax.legend()\n  \n  # Adjust layout\n  plt.tight_layout()\n  `\n}];\n\n// R examples\nexport const rExamples = [{\n  name: 'Basic Bar Chart (ggplot2)',\n  code: `# Create a data frame\n  data <- data.frame(\n    category = c(\"A\", \"B\", \"C\", \"D\", \"E\"),\n    value = c(22, 35, 14, 28, 19)\n  )\n  \n  # Create a ggplot bar chart\n  p <- ggplot(data, aes(x = category, y = value, fill = category)) +\n    geom_bar(stat = \"identity\", width = 0.7) +\n    geom_text(aes(label = value), vjust = -0.5, size = 4) +\n    scale_fill_brewer(palette = \"Pastel1\") +\n    labs(\n      title = \"Simple Bar Chart\",\n      x = \"Categories\",\n      y = \"Values\"\n    ) +\n    theme_minimal() +\n    theme(\n      plot.title = element_text(hjust = 0.5, size = 16),\n      axis.title = element_text(size = 12),\n      legend.position = \"none\"\n    )\n  \n  # Print the plot\n  print(p)\n  `\n}, {\n  name: 'Interactive Scatter Plot (plotly)',\n  code: `# Load required libraries\n  library(plotly)\n  \n  # Create sample data\n  set.seed(42)\n  n <- 100\n  x <- rnorm(n)\n  y <- x + rnorm(n)\n  size <- runif(n, 5, 15)\n  color <- runif(n)\n  \n  # Create a data frame\n  data <- data.frame(x = x, y = y, size = size, color = color)\n  \n  # Create a plotly scatter plot\n  p <- plot_ly(data,\n            x = ~x,\n            y = ~y,\n            size = ~size,\n            color = ~color,\n            type = \"scatter\",\n            mode = \"markers\",\n            marker = list(\n              opacity = 0.8,\n              line = list(width = 1, color = \"darkslategrey\")\n            ),\n            hoverinfo = \"text\",\n            text = ~paste(\"X:\", round(x, 2), \"<br>Y:\", round(y, 2))\n          ) %>%\n          layout(\n            title = \"Interactive Scatter Plot\",\n            xaxis = list(title = \"X Value\"),\n            yaxis = list(title = \"Y Value\"),\n            coloraxis = list(colorbar = list(title = \"Color Scale\"))\n          )\n  \n  # Print the plot\n  p\n  `\n}, {\n  name: '3D Plot (rgl)',\n  code: `# Load libraries\n  library(rgl)\n  \n  # Generate data for a 3D surface\n  x <- seq(-5, 5, length = 50)\n  y <- seq(-5, 5, length = 50)\n  z <- outer(x, y, function(x, y) sin(sqrt(x^2 + y^2)))\n  \n  # Create colors based on z values\n  col <- heat.colors(length(z))\n  \n  # Create a 3D surface\n  persp3d(x, y, z, col = col,\n         xlab = \"X Axis\", ylab = \"Y Axis\", zlab = \"Z Axis\",\n         main = \"3D Surface Plot\")\n  \n  # Add some points\n  points3d(x = runif(50, -5, 5),\n           y = runif(50, -5, 5),\n           z = runif(50, -1, 1),\n           col = \"blue\", size = 4)\n  \n  # Save as PNG (since we can't display 3D interactively in this interface)\n  rgl.snapshot('3d_plot.png')\n  `\n}, {\n  name: 'Boxplot (ggplot2)',\n  code: `# Create sample data\n  set.seed(123)\n  data <- data.frame(\n    group = rep(c(\"A\", \"B\", \"C\", \"D\"), each = 30),\n    value = c(\n      rnorm(30, mean = 5, sd = 1),\n      rnorm(30, mean = 7, sd = 1.5),\n      rnorm(30, mean = 4, sd = 0.8),\n      rnorm(30, mean = 6, sd = 1.2)\n    )\n  )\n  \n  # Create a boxplot with ggplot2\n  p <- ggplot(data, aes(x = group, y = value, fill = group)) +\n    geom_boxplot(alpha = 0.7) +\n    geom_jitter(width = 0.2, alpha = 0.5) +\n    scale_fill_brewer(palette = \"Set2\") +\n    labs(\n      title = \"Boxplot Comparison\",\n      x = \"Group\",\n      y = \"Value\"\n    ) +\n    theme_minimal() +\n    theme(\n      plot.title = element_text(hjust = 0.5, size = 16),\n      axis.title = element_text(size = 12),\n      legend.position = \"none\"\n    )\n  \n  # Print the plot\n  print(p)\n  `\n}];","map":{"version":3,"names":["pythonExamples","name","code","rExamples"],"sources":["/Users/User/Documents/Language agnostic visualization/frontend/src/examples.js"],"sourcesContent":["// Python examples\nexport const pythonExamples = [\n    {\n      name: 'Simple Bar Chart (Matplotlib)',\n      code: `\n  import matplotlib.pyplot as plt\n  import numpy as np\n  \n  # Data for plotting\n  categories = ['A', 'B', 'C', 'D', 'E']\n  values = [22, 35, 14, 28, 19]\n  \n  # Create the figure and axis\n  fig, ax = plt.subplots(figsize=(8, 6))\n  \n  # Create the bar chart\n  ax.bar(categories, values, color='skyblue')\n  \n  # Add labels and title\n  ax.set_xlabel('Categories')\n  ax.set_ylabel('Values')\n  ax.set_title('Simple Bar Chart')\n  \n  # Add some text for labels, title and custom x-axis tick labels, etc.\n  ax.set_xticks(range(len(categories)))\n  ax.set_xticklabels(categories)\n  \n  # Add value labels on top of each bar\n  for i, v in enumerate(values):\n      ax.text(i, v + 0.5, str(v), ha='center')\n  \n  # Adjust layout\n  plt.tight_layout()\n  `\n    },\n    {\n      name: 'Interactive Scatter Plot (Plotly)',\n      code: `\n  import plotly.express as px\n  import numpy as np\n  \n  # Generate random data\n  np.random.seed(42)\n  n = 100\n  x = np.random.normal(0, 1, n)\n  y = x + np.random.normal(0, 1, n)\n  sizes = np.random.uniform(5, 15, n)\n  colors = np.random.uniform(0, 1, n)\n  \n  # Create a scatter plot with Plotly Express\n  fig = px.scatter(\n      x=x, \n      y=y,\n      size=sizes,\n      color=colors,\n      color_continuous_scale='viridis',\n      opacity=0.8,\n      title='Interactive Scatter Plot',\n      labels={'x': 'X Value', 'y': 'Y Value', 'color': 'Color Value'},\n      hover_data={'x': True, 'y': True}\n  )\n  \n  # Update layout\n  fig.update_layout(\n      width=800,\n      height=600,\n      title_font_size=20,\n      title_x=0.5,\n      coloraxis_colorbar=dict(title='Color Scale')\n  )\n  \n  # Update traces\n  fig.update_traces(\n      marker=dict(line=dict(width=1, color='DarkSlateGrey')),\n      selector=dict(mode='markers')\n  )\n  `\n    },\n    {\n      name: '3D Surface Plot (Plotly)',\n      code: `\n  import plotly.graph_objects as go\n  import numpy as np\n  \n  # Create data\n  x = np.linspace(-5, 5, 50)\n  y = np.linspace(-5, 5, 50)\n  x_grid, y_grid = np.meshgrid(x, y)\n  \n  # Create 3D surface\n  z_grid = np.sin(np.sqrt(x_grid**2 + y_grid**2))\n  \n  # Create figure\n  fig = go.Figure(data=[go.Surface(x=x_grid, y=y_grid, z=z_grid)])\n  \n  # Update layout\n  fig.update_layout(\n      title='3D Surface Plot',\n      autosize=False,\n      width=800,\n      height=600,\n      scene=dict(\n          xaxis_title='X Axis',\n          yaxis_title='Y Axis',\n          zaxis_title='Z Axis',\n          aspectratio=dict(x=1, y=1, z=0.7),\n          camera=dict(\n              eye=dict(x=1.2, y=1.2, z=1.2)\n          )\n      )\n  )\n  `\n    },\n    {\n      name: 'Line Chart with Multiple Series (Matplotlib)',\n      code: `import matplotlib.pyplot as plt\n  import numpy as np\n  \n  # Generate data\n  x = np.linspace(0, 10, 100)\n  y1 = np.sin(x)\n  y2 = np.cos(x)\n  y3 = np.sin(x) * np.cos(x)\n  \n  # Create figure and axis\n  fig, ax = plt.subplots(figsize=(10, 6))\n  \n  # Plot data\n  ax.plot(x, y1, label='sin(x)', color='blue', linewidth=2)\n  ax.plot(x, y2, label='cos(x)', color='red', linewidth=2)\n  ax.plot(x, y3, label='sin(x)cos(x)', color='green', linewidth=2, linestyle='--')\n  \n  # Add labels and title\n  ax.set_xlabel('X')\n  ax.set_ylabel('Y')\n  ax.set_title('Multiple Line Series')\n  \n  # Add grid\n  ax.grid(True, linestyle='--', alpha=0.7)\n  \n  # Add legend\n  ax.legend()\n  \n  # Adjust layout\n  plt.tight_layout()\n  `\n    }\n  ];\n  \n  // R examples\n  export const rExamples = [\n    {\n      name: 'Basic Bar Chart (ggplot2)',\n      code: `# Create a data frame\n  data <- data.frame(\n    category = c(\"A\", \"B\", \"C\", \"D\", \"E\"),\n    value = c(22, 35, 14, 28, 19)\n  )\n  \n  # Create a ggplot bar chart\n  p <- ggplot(data, aes(x = category, y = value, fill = category)) +\n    geom_bar(stat = \"identity\", width = 0.7) +\n    geom_text(aes(label = value), vjust = -0.5, size = 4) +\n    scale_fill_brewer(palette = \"Pastel1\") +\n    labs(\n      title = \"Simple Bar Chart\",\n      x = \"Categories\",\n      y = \"Values\"\n    ) +\n    theme_minimal() +\n    theme(\n      plot.title = element_text(hjust = 0.5, size = 16),\n      axis.title = element_text(size = 12),\n      legend.position = \"none\"\n    )\n  \n  # Print the plot\n  print(p)\n  `\n    },\n    {\n      name: 'Interactive Scatter Plot (plotly)',\n      code: `# Load required libraries\n  library(plotly)\n  \n  # Create sample data\n  set.seed(42)\n  n <- 100\n  x <- rnorm(n)\n  y <- x + rnorm(n)\n  size <- runif(n, 5, 15)\n  color <- runif(n)\n  \n  # Create a data frame\n  data <- data.frame(x = x, y = y, size = size, color = color)\n  \n  # Create a plotly scatter plot\n  p <- plot_ly(data,\n            x = ~x,\n            y = ~y,\n            size = ~size,\n            color = ~color,\n            type = \"scatter\",\n            mode = \"markers\",\n            marker = list(\n              opacity = 0.8,\n              line = list(width = 1, color = \"darkslategrey\")\n            ),\n            hoverinfo = \"text\",\n            text = ~paste(\"X:\", round(x, 2), \"<br>Y:\", round(y, 2))\n          ) %>%\n          layout(\n            title = \"Interactive Scatter Plot\",\n            xaxis = list(title = \"X Value\"),\n            yaxis = list(title = \"Y Value\"),\n            coloraxis = list(colorbar = list(title = \"Color Scale\"))\n          )\n  \n  # Print the plot\n  p\n  `\n    },\n    {\n      name: '3D Plot (rgl)',\n      code: `# Load libraries\n  library(rgl)\n  \n  # Generate data for a 3D surface\n  x <- seq(-5, 5, length = 50)\n  y <- seq(-5, 5, length = 50)\n  z <- outer(x, y, function(x, y) sin(sqrt(x^2 + y^2)))\n  \n  # Create colors based on z values\n  col <- heat.colors(length(z))\n  \n  # Create a 3D surface\n  persp3d(x, y, z, col = col,\n         xlab = \"X Axis\", ylab = \"Y Axis\", zlab = \"Z Axis\",\n         main = \"3D Surface Plot\")\n  \n  # Add some points\n  points3d(x = runif(50, -5, 5),\n           y = runif(50, -5, 5),\n           z = runif(50, -1, 1),\n           col = \"blue\", size = 4)\n  \n  # Save as PNG (since we can't display 3D interactively in this interface)\n  rgl.snapshot('3d_plot.png')\n  `\n    },\n    {\n      name: 'Boxplot (ggplot2)',\n      code: `# Create sample data\n  set.seed(123)\n  data <- data.frame(\n    group = rep(c(\"A\", \"B\", \"C\", \"D\"), each = 30),\n    value = c(\n      rnorm(30, mean = 5, sd = 1),\n      rnorm(30, mean = 7, sd = 1.5),\n      rnorm(30, mean = 4, sd = 0.8),\n      rnorm(30, mean = 6, sd = 1.2)\n    )\n  )\n  \n  # Create a boxplot with ggplot2\n  p <- ggplot(data, aes(x = group, y = value, fill = group)) +\n    geom_boxplot(alpha = 0.7) +\n    geom_jitter(width = 0.2, alpha = 0.5) +\n    scale_fill_brewer(palette = \"Set2\") +\n    labs(\n      title = \"Boxplot Comparison\",\n      x = \"Group\",\n      y = \"Value\"\n    ) +\n    theme_minimal() +\n    theme(\n      plot.title = element_text(hjust = 0.5, size = 16),\n      axis.title = element_text(size = 12),\n      legend.position = \"none\"\n    )\n  \n  # Print the plot\n  print(p)\n  `\n    }\n  ];"],"mappings":"AAAA;AACA,OAAO,MAAMA,cAAc,GAAG,CAC1B;EACEC,IAAI,EAAE,+BAA+B;EACrCC,IAAI,EAAE;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACI,CAAC,EACD;EACED,IAAI,EAAE,mCAAmC;EACzCC,IAAI,EAAE;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACI,CAAC,EACD;EACED,IAAI,EAAE,0BAA0B;EAChCC,IAAI,EAAE;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACI,CAAC,EACD;EACED,IAAI,EAAE,8CAA8C;EACpDC,IAAI,EAAE;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACI,CAAC,CACF;;AAED;AACA,OAAO,MAAMC,SAAS,GAAG,CACvB;EACEF,IAAI,EAAE,2BAA2B;EACjCC,IAAI,EAAE;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACI,CAAC,EACD;EACED,IAAI,EAAE,mCAAmC;EACzCC,IAAI,EAAE;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACI,CAAC,EACD;EACED,IAAI,EAAE,eAAe;EACrBC,IAAI,EAAE;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACI,CAAC,EACD;EACED,IAAI,EAAE,mBAAmB;EACzBC,IAAI,EAAE;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACI,CAAC,CACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}